n
max_streak
n
max_streak
n
index
n
index
n
[value, max_streak]
n
value
max_streak
n
max_streak
n
s[index + 1]
value
index
n
current_streak
max_streak
value
n
index
n
c
nc
n
c
max_streak
n
current_streak
index
value
n
value
current_streak
max_streak
n
result
n
result
n
result
n
nums2
nums1
result
n
result
n
result
n
nums2
nums1
n
nums2
nums1
result
n
nums1[i1]
nums1[i]
nums1
nums1[i]
j
i1
c
j
i
c
(aux_1.to_i + aux_2.to_i).to_s(2)
aux_1.to_i + aux_2.to_i
aux_1.to_i + aux2.to_i
aux_1.to_i
(aux_1.to_i + aux_2.to_i).to_s(10).to_i(2)
aux_2
aux_1
c
aux_2
aux_1
c
 (result_size, nums).flatten
return (result_size, nums).flatten
return result_size, nums
nums
result_size
result_size, nums
puts nums
puts result_size
n
(nums.size..a.size).each { |i| nums << _ }
a.size
nums.size
c
nums
(nums.size..a.size).each { |i| nums << _ }
nums
(nums.size..a.size).each { |i| nums << "_" }
(num.size..a.size).each { |i| nums << "_" }
a.size
nums.size
num.size
nums
a
size_of_deleted_val
c
l2[index]
l2.size
aux
result
index
n
index
aux
result
n
result
n
result
n
result
n
result
n
result
n
result
 (l2[index] + aux[index - 1]) /10
(l2[index] + aux[index - 1]) % 10
(l2[index] + aux[index - 1])
aux[index -1]
index
l2[index]
c
n
l1
c
strike(arr.join) + value[arr.join.size..value.size]
(arr.join.size..value.size)
strike(arr.join)
strike(arr.join) + (arr.join.size..value.size)
value[arr.join.size..value.size]
value.size
arr.join.size
arr.size
strike(arr.join)
strike(arr)
strike(value)
value
c
value.include? arr.join
value.include? arr
arr.include? value
value
n
result
n
result
n
arr.include? value
arr
word
value
exit
(sum_zero.to_f / arr.size).truncate(6)
(sum_minus.to_f / arr.size).truncate(6)
(sum_plus.to_f / arr.size).truncate(6)
(sum_plus / arr.size).truncate(6).to_f
(sum_plus.to_f / arr.size)
(sum_plus / arr.size)
sum_minus
sum_zero
sum_plus
n
value
c
n
sum_zero
n
value
n
sum_plus
n
value
n
sum_plus
n
sum_plus
n
value
c
exit
b.size
a.size
sum_b
sum_a
a[i] > b[i]
b[i]
a[i]
puts i
i
